/*
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.147.4893-d7846311aebf
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

/**
 * BTThumbnailSizeInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-18T10:48:36.222032-04:00[America/New_York]")
public class BTThumbnailSizeInfo {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_RENDER_MODE = "renderMode";
  @SerializedName(SERIALIZED_NAME_RENDER_MODE)
  private String renderMode;

  public static final String SERIALIZED_NAME_SHEET_NAME = "sheetName";
  @SerializedName(SERIALIZED_NAME_SHEET_NAME)
  private String sheetName;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_VIEW_ORIENTATION = "viewOrientation";
  @SerializedName(SERIALIZED_NAME_VIEW_ORIENTATION)
  private String viewOrientation;

  public BTThumbnailSizeInfo() { 
  }

  public BTThumbnailSizeInfo href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }


  public BTThumbnailSizeInfo mediaType(String mediaType) {
    
    this.mediaType = mediaType;
    return this;
  }

   /**
   * Get mediaType
   * @return mediaType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMediaType() {
    return mediaType;
  }


  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public BTThumbnailSizeInfo renderMode(String renderMode) {
    
    this.renderMode = renderMode;
    return this;
  }

   /**
   * Get renderMode
   * @return renderMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRenderMode() {
    return renderMode;
  }


  public void setRenderMode(String renderMode) {
    this.renderMode = renderMode;
  }


  public BTThumbnailSizeInfo sheetName(String sheetName) {
    
    this.sheetName = sheetName;
    return this;
  }

   /**
   * Get sheetName
   * @return sheetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSheetName() {
    return sheetName;
  }


  public void setSheetName(String sheetName) {
    this.sheetName = sheetName;
  }


  public BTThumbnailSizeInfo size(String size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSize() {
    return size;
  }


  public void setSize(String size) {
    this.size = size;
  }


  public BTThumbnailSizeInfo uniqueId(String uniqueId) {
    
    this.uniqueId = uniqueId;
    return this;
  }

   /**
   * Get uniqueId
   * @return uniqueId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUniqueId() {
    return uniqueId;
  }


  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }


  public BTThumbnailSizeInfo viewOrientation(String viewOrientation) {
    
    this.viewOrientation = viewOrientation;
    return this;
  }

   /**
   * Get viewOrientation
   * @return viewOrientation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getViewOrientation() {
    return viewOrientation;
  }


  public void setViewOrientation(String viewOrientation) {
    this.viewOrientation = viewOrientation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BTThumbnailSizeInfo btThumbnailSizeInfo = (BTThumbnailSizeInfo) o;
    return Objects.equals(this.href, btThumbnailSizeInfo.href) &&
        Objects.equals(this.mediaType, btThumbnailSizeInfo.mediaType) &&
        Objects.equals(this.renderMode, btThumbnailSizeInfo.renderMode) &&
        Objects.equals(this.sheetName, btThumbnailSizeInfo.sheetName) &&
        Objects.equals(this.size, btThumbnailSizeInfo.size) &&
        Objects.equals(this.uniqueId, btThumbnailSizeInfo.uniqueId) &&
        Objects.equals(this.viewOrientation, btThumbnailSizeInfo.viewOrientation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, mediaType, renderMode, sheetName, size, uniqueId, viewOrientation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BTThumbnailSizeInfo {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    renderMode: ").append(toIndentedString(renderMode)).append("\n");
    sb.append("    sheetName: ").append(toIndentedString(sheetName)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    viewOrientation: ").append(toIndentedString(viewOrientation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

