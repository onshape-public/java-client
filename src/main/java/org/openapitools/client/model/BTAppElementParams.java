/*
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.147.4893-d7846311aebf
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.BTAppElementChangeParams;
import org.openapitools.client.model.BTElementLocationParams;

/**
 * BTAppElementParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-18T10:48:36.222032-04:00[America/New_York]")
public class BTAppElementParams {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FORMAT_ID = "formatId";
  @SerializedName(SERIALIZED_NAME_FORMAT_ID)
  private String formatId;

  public static final String SERIALIZED_NAME_JSON_TREE = "jsonTree";
  @SerializedName(SERIALIZED_NAME_JSON_TREE)
  private Object jsonTree;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private BTElementLocationParams location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBELEMENTS = "subelements";
  @SerializedName(SERIALIZED_NAME_SUBELEMENTS)
  private List<BTAppElementChangeParams> subelements = null;

  public BTAppElementParams() { 
  }

  public BTAppElementParams description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The label that will appear in the document&#39;s edit history for this operation. If blank, a value will be auto-generated.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public BTAppElementParams formatId(String formatId) {
    
    this.formatId = formatId;
    return this;
  }

   /**
   * The data type of the application. This string allows an application to distinguish their elements from elements of another application.
   * @return formatId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The data type of the application. This string allows an application to distinguish their elements from elements of another application.")

  public String getFormatId() {
    return formatId;
  }


  public void setFormatId(String formatId) {
    this.formatId = formatId;
  }


  public BTAppElementParams jsonTree(Object jsonTree) {
    
    this.jsonTree = jsonTree;
    return this;
  }

   /**
   * Initialization data for the new element&#39;s json tree.
   * @return jsonTree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{ 'stringKey': 'bar', 'arrayKey': [ 1, 2, 3 ], 'objectKey': { 'subKey': false } }", value = "Initialization data for the new element's json tree.")

  public Object getJsonTree() {
    return jsonTree;
  }


  public void setJsonTree(Object jsonTree) {
    this.jsonTree = jsonTree;
  }


  public BTAppElementParams location(BTElementLocationParams location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BTElementLocationParams getLocation() {
    return location;
  }


  public void setLocation(BTElementLocationParams location) {
    this.location = location;
  }


  public BTAppElementParams name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the element being created. If blank, a name will be auto-generated.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the element being created. If blank, a name will be auto-generated.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public BTAppElementParams subelements(List<BTAppElementChangeParams> subelements) {
    
    this.subelements = subelements;
    return this;
  }

  public BTAppElementParams addSubelementsItem(BTAppElementChangeParams subelementsItem) {
    if (this.subelements == null) {
      this.subelements = new ArrayList<BTAppElementChangeParams>();
    }
    this.subelements.add(subelementsItem);
    return this;
  }

   /**
   * Initialization data for the new element&#39;s subelements.
   * @return subelements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Initialization data for the new element's subelements.")

  public List<BTAppElementChangeParams> getSubelements() {
    return subelements;
  }


  public void setSubelements(List<BTAppElementChangeParams> subelements) {
    this.subelements = subelements;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BTAppElementParams btAppElementParams = (BTAppElementParams) o;
    return Objects.equals(this.description, btAppElementParams.description) &&
        Objects.equals(this.formatId, btAppElementParams.formatId) &&
        Objects.equals(this.jsonTree, btAppElementParams.jsonTree) &&
        Objects.equals(this.location, btAppElementParams.location) &&
        Objects.equals(this.name, btAppElementParams.name) &&
        Objects.equals(this.subelements, btAppElementParams.subelements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, formatId, jsonTree, location, name, subelements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BTAppElementParams {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    formatId: ").append(toIndentedString(formatId)).append("\n");
    sb.append("    jsonTree: ").append(toIndentedString(jsonTree)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subelements: ").append(toIndentedString(subelements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

