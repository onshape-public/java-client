/*
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.147.4893-d7846311aebf
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * BTAppElementChangeParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-18T10:48:36.222032-04:00[America/New_York]")
public class BTAppElementChangeParams {
  public static final String SERIALIZED_NAME_BASE_CONTENT = "baseContent";
  @SerializedName(SERIALIZED_NAME_BASE_CONTENT)
  private byte[] baseContent;

  public static final String SERIALIZED_NAME_DELTA = "delta";
  @SerializedName(SERIALIZED_NAME_DELTA)
  private byte[] delta;

  public static final String SERIALIZED_NAME_SUBELEMENT_ID = "subelementId";
  @SerializedName(SERIALIZED_NAME_SUBELEMENT_ID)
  private String subelementId;

  public BTAppElementChangeParams() { 
  }

  public BTAppElementChangeParams baseContent(byte[] baseContent) {
    
    this.baseContent = baseContent;
    return this;
  }

   /**
   * This base64-encoded data is treated as a full representation of the sub-element&#39;s data and all deltas previously added will no longer be returned.
   * @return baseContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This base64-encoded data is treated as a full representation of the sub-element's data and all deltas previously added will no longer be returned.")

  public byte[] getBaseContent() {
    return baseContent;
  }


  public void setBaseContent(byte[] baseContent) {
    this.baseContent = baseContent;
  }


  public BTAppElementChangeParams delta(byte[] delta) {
    
    this.delta = delta;
    return this;
  }

   /**
   * This base64-encoded data is a delta which the application can apply to the last added baseContent data.
   * @return delta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This base64-encoded data is a delta which the application can apply to the last added baseContent data.")

  public byte[] getDelta() {
    return delta;
  }


  public void setDelta(byte[] delta) {
    this.delta = delta;
  }


  public BTAppElementChangeParams subelementId(String subelementId) {
    
    this.subelementId = subelementId;
    return this;
  }

   /**
   * The id of the subelement to edit. The value is determined by the application.
   * @return subelementId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the subelement to edit. The value is determined by the application.")

  public String getSubelementId() {
    return subelementId;
  }


  public void setSubelementId(String subelementId) {
    this.subelementId = subelementId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BTAppElementChangeParams btAppElementChangeParams = (BTAppElementChangeParams) o;
    return Arrays.equals(this.baseContent, btAppElementChangeParams.baseContent) &&
        Arrays.equals(this.delta, btAppElementChangeParams.delta) &&
        Objects.equals(this.subelementId, btAppElementChangeParams.subelementId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(baseContent), Arrays.hashCode(delta), subelementId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BTAppElementChangeParams {\n");
    sb.append("    baseContent: ").append(toIndentedString(baseContent)).append("\n");
    sb.append("    delta: ").append(toIndentedString(delta)).append("\n");
    sb.append("    subelementId: ").append(toIndentedString(subelementId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

