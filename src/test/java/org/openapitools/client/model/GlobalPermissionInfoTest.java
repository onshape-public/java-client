/*
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.147.4893-d7846311aebf
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for GlobalPermissionInfo
 */
public class GlobalPermissionInfoTest {
    private final GlobalPermissionInfo model = new GlobalPermissionInfo();

    /**
     * Model tests for GlobalPermissionInfo
     */
    @Test
    public void testGlobalPermissionInfo() {
        // TODO: test GlobalPermissionInfo
    }

    /**
     * Test the property 'accessReports'
     */
    @Test
    public void accessReportsTest() {
        // TODO: test accessReports
    }

    /**
     * Test the property 'adminEnterprise'
     */
    @Test
    public void adminEnterpriseTest() {
        // TODO: test adminEnterprise
    }

    /**
     * Test the property 'allowAppStoreAccess'
     */
    @Test
    public void allowAppStoreAccessTest() {
        // TODO: test allowAppStoreAccess
    }

    /**
     * Test the property 'allowPublicDocumentsAccess'
     */
    @Test
    public void allowPublicDocumentsAccessTest() {
        // TODO: test allowPublicDocumentsAccess
    }

    /**
     * Test the property 'approveReleases'
     */
    @Test
    public void approveReleasesTest() {
        // TODO: test approveReleases
    }

    /**
     * Test the property 'createChangeOrders'
     */
    @Test
    public void createChangeOrdersTest() {
        // TODO: test createChangeOrders
    }

    /**
     * Test the property 'createChangeRequests'
     */
    @Test
    public void createChangeRequestsTest() {
        // TODO: test createChangeRequests
    }

    /**
     * Test the property 'createDocumentsInRoot'
     */
    @Test
    public void createDocumentsInRootTest() {
        // TODO: test createDocumentsInRoot
    }

    /**
     * Test the property 'createProject'
     */
    @Test
    public void createProjectTest() {
        // TODO: test createProject
    }

    /**
     * Test the property 'createReleases'
     */
    @Test
    public void createReleasesTest() {
        // TODO: test createReleases
    }

    /**
     * Test the property 'deletePermanently'
     */
    @Test
    public void deletePermanentlyTest() {
        // TODO: test deletePermanently
    }

    /**
     * Test the property 'manageGuestUsers'
     */
    @Test
    public void manageGuestUsersTest() {
        // TODO: test manageGuestUsers
    }

    /**
     * Test the property 'manageNonGeometricItems'
     */
    @Test
    public void manageNonGeometricItemsTest() {
        // TODO: test manageNonGeometricItems
    }

    /**
     * Test the property 'manageRbac'
     */
    @Test
    public void manageRbacTest() {
        // TODO: test manageRbac
    }

    /**
     * Test the property 'manageUsers'
     */
    @Test
    public void manageUsersTest() {
        // TODO: test manageUsers
    }

    /**
     * Test the property 'manageWorkflows'
     */
    @Test
    public void manageWorkflowsTest() {
        // TODO: test manageWorkflows
    }

    /**
     * Test the property 'shareForAnonymousAccess'
     */
    @Test
    public void shareForAnonymousAccessTest() {
        // TODO: test shareForAnonymousAccess
    }

    /**
     * Test the property 'transferDocumentsFromEnterprise'
     */
    @Test
    public void transferDocumentsFromEnterpriseTest() {
        // TODO: test transferDocumentsFromEnterprise
    }

    /**
     * Test the property 'viewChangeOrders'
     */
    @Test
    public void viewChangeOrdersTest() {
        // TODO: test viewChangeOrders
    }

    /**
     * Test the property 'viewChangeRequests'
     */
    @Test
    public void viewChangeRequestsTest() {
        // TODO: test viewChangeRequests
    }

}
