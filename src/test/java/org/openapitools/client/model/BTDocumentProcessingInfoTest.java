/*
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * The version of the OpenAPI document: 1.147.4893-d7846311aebf
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.BTBaseInfo;
import org.openapitools.client.model.BTDocumentInfo;
import org.openapitools.client.model.BTDocumentLabelInfo;
import org.openapitools.client.model.BTDocumentProcessingInfo;
import org.openapitools.client.model.BTDocumentProcessingInfoAllOf;
import org.openapitools.client.model.BTOwnerInfo;
import org.openapitools.client.model.BTThumbnailInfo;
import org.openapitools.client.model.BTUserBasicSummaryInfo;
import org.openapitools.client.model.BTWorkspaceInfo;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for BTDocumentProcessingInfo
 */
public class BTDocumentProcessingInfoTest {
    private final BTDocumentProcessingInfo model = new BTDocumentProcessingInfo();

    /**
     * Model tests for BTDocumentProcessingInfo
     */
    @Test
    public void testBTDocumentProcessingInfo() {
        // TODO: test BTDocumentProcessingInfo
    }

    /**
     * Test the property 'anonymousAccessAllowed'
     */
    @Test
    public void anonymousAccessAllowedTest() {
        // TODO: test anonymousAccessAllowed
    }

    /**
     * Test the property 'anonymousAllowsExport'
     */
    @Test
    public void anonymousAllowsExportTest() {
        // TODO: test anonymousAllowsExport
    }

    /**
     * Test the property 'betaCapabilityIds'
     */
    @Test
    public void betaCapabilityIdsTest() {
        // TODO: test betaCapabilityIds
    }

    /**
     * Test the property 'canMove'
     */
    @Test
    public void canMoveTest() {
        // TODO: test canMove
    }

    /**
     * Test the property 'canUnshare'
     */
    @Test
    public void canUnshareTest() {
        // TODO: test canUnshare
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'createdBy'
     */
    @Test
    public void createdByTest() {
        // TODO: test createdBy
    }

    /**
     * Test the property 'createdWithEducationPlan'
     */
    @Test
    public void createdWithEducationPlanTest() {
        // TODO: test createdWithEducationPlan
    }

    /**
     * Test the property 'defaultElementId'
     */
    @Test
    public void defaultElementIdTest() {
        // TODO: test defaultElementId
    }

    /**
     * Test the property 'defaultWorkspace'
     */
    @Test
    public void defaultWorkspaceTest() {
        // TODO: test defaultWorkspace
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'documentLabels'
     */
    @Test
    public void documentLabelsTest() {
        // TODO: test documentLabels
    }

    /**
     * Test the property 'documentThumbnailElementId'
     */
    @Test
    public void documentThumbnailElementIdTest() {
        // TODO: test documentThumbnailElementId
    }

    /**
     * Test the property 'documentType'
     */
    @Test
    public void documentTypeTest() {
        // TODO: test documentType
    }

    /**
     * Test the property 'duplicateNameViolationError'
     */
    @Test
    public void duplicateNameViolationErrorTest() {
        // TODO: test duplicateNameViolationError
    }

    /**
     * Test the property 'hasReleaseRevisionableObjects'
     */
    @Test
    public void hasReleaseRevisionableObjectsTest() {
        // TODO: test hasReleaseRevisionableObjects
    }

    /**
     * Test the property 'hasRelevantInsertables'
     */
    @Test
    public void hasRelevantInsertablesTest() {
        // TODO: test hasRelevantInsertables
    }

    /**
     * Test the property 'href'
     */
    @Test
    public void hrefTest() {
        // TODO: test href
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'isContainer'
     */
    @Test
    public void isContainerTest() {
        // TODO: test isContainer
    }

    /**
     * Test the property 'isEnterpriseOwned'
     */
    @Test
    public void isEnterpriseOwnedTest() {
        // TODO: test isEnterpriseOwned
    }

    /**
     * Test the property 'isMutable'
     */
    @Test
    public void isMutableTest() {
        // TODO: test isMutable
    }

    /**
     * Test the property 'isOrphaned'
     */
    @Test
    public void isOrphanedTest() {
        // TODO: test isOrphaned
    }

    /**
     * Test the property 'isUpgradedToLatestVersion'
     */
    @Test
    public void isUpgradedToLatestVersionTest() {
        // TODO: test isUpgradedToLatestVersion
    }

    /**
     * Test the property 'isUsingManagedWorkflow'
     */
    @Test
    public void isUsingManagedWorkflowTest() {
        // TODO: test isUsingManagedWorkflow
    }

    /**
     * Test the property 'likedByCurrentUser'
     */
    @Test
    public void likedByCurrentUserTest() {
        // TODO: test likedByCurrentUser
    }

    /**
     * Test the property 'likes'
     */
    @Test
    public void likesTest() {
        // TODO: test likes
    }

    /**
     * Test the property 'modifiedAt'
     */
    @Test
    public void modifiedAtTest() {
        // TODO: test modifiedAt
    }

    /**
     * Test the property 'modifiedBy'
     */
    @Test
    public void modifiedByTest() {
        // TODO: test modifiedBy
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'notRevisionManaged'
     */
    @Test
    public void notRevisionManagedTest() {
        // TODO: test notRevisionManaged
    }

    /**
     * Test the property 'numberOfTimesCopied'
     */
    @Test
    public void numberOfTimesCopiedTest() {
        // TODO: test numberOfTimesCopied
    }

    /**
     * Test the property 'numberOfTimesReferenced'
     */
    @Test
    public void numberOfTimesReferencedTest() {
        // TODO: test numberOfTimesReferenced
    }

    /**
     * Test the property 'owner'
     */
    @Test
    public void ownerTest() {
        // TODO: test owner
    }

    /**
     * Test the property 'parentId'
     */
    @Test
    public void parentIdTest() {
        // TODO: test parentId
    }

    /**
     * Test the property 'permission'
     */
    @Test
    public void permissionTest() {
        // TODO: test permission
    }

    /**
     * Test the property 'permissionSet'
     */
    @Test
    public void permissionSetTest() {
        // TODO: test permissionSet
    }

    /**
     * Test the property 'projectId'
     */
    @Test
    public void projectIdTest() {
        // TODO: test projectId
    }

    /**
     * Test the property '_public'
     */
    @Test
    public void _publicTest() {
        // TODO: test _public
    }

    /**
     * Test the property 'recentVersion'
     */
    @Test
    public void recentVersionTest() {
        // TODO: test recentVersion
    }

    /**
     * Test the property 'resourceType'
     */
    @Test
    public void resourceTypeTest() {
        // TODO: test resourceType
    }

    /**
     * Test the property 'supportTeamUserAndShared'
     */
    @Test
    public void supportTeamUserAndSharedTest() {
        // TODO: test supportTeamUserAndShared
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'thumbnail'
     */
    @Test
    public void thumbnailTest() {
        // TODO: test thumbnail
    }

    /**
     * Test the property 'totalWorkspacesScheduledForUpdate'
     */
    @Test
    public void totalWorkspacesScheduledForUpdateTest() {
        // TODO: test totalWorkspacesScheduledForUpdate
    }

    /**
     * Test the property 'totalWorkspacesUpdating'
     */
    @Test
    public void totalWorkspacesUpdatingTest() {
        // TODO: test totalWorkspacesUpdating
    }

    /**
     * Test the property 'trash'
     */
    @Test
    public void trashTest() {
        // TODO: test trash
    }

    /**
     * Test the property 'trashedAt'
     */
    @Test
    public void trashedAtTest() {
        // TODO: test trashedAt
    }

    /**
     * Test the property 'treeHref'
     */
    @Test
    public void treeHrefTest() {
        // TODO: test treeHref
    }

    /**
     * Test the property 'userAccountLimitsBreached'
     */
    @Test
    public void userAccountLimitsBreachedTest() {
        // TODO: test userAccountLimitsBreached
    }

    /**
     * Test the property 'viewRef'
     */
    @Test
    public void viewRefTest() {
        // TODO: test viewRef
    }

    /**
     * Test the property 'translationEventKey'
     */
    @Test
    public void translationEventKeyTest() {
        // TODO: test translationEventKey
    }

    /**
     * Test the property 'translationId'
     */
    @Test
    public void translationIdTest() {
        // TODO: test translationId
    }

}
